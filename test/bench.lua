-- Adapted from: http://lua-users.org/wiki/ObjectBenchmarkTests-- Table Access Benchmarking.print("Table Access Benchmark " .. _VERSION)runs = 10000000function comma_value(amount) -- from sam_lie  local formatted = amount  while true do      formatted, k = string.gsub(formatted, "^(-?%d+)(%d%d%d)", '%1,%2')    if (k==0) then      break    end  end  return formattedendprint(comma_value(runs) .. " runs")do  local function runbenchmark(name, code, count, ob)    local f = loadstring([[        local count,ob = ...        local loc = {}        local clock = os.clock        local start = clock()        for i=1,count do ]] .. code .. [[ end        return clock() - start    ]])    io.write(f(count, ob), "\t", name, "\n")      end  local nameof = {}  local codeof = {}  local tests  = {}  function addbenchmark(name, code, ob)    nameof[ob] = name    codeof[ob] = code    tests[#tests+1] = ob  end  function runbenchmarks(count)    for _,ob in ipairs(tests) do      runbenchmark(nameof[ob], codeof[ob], count, ob)    end  endendfunction makeob1()  local self = {data = {}}  function self:test() table.insert(self.data,'foo')  end  return selfendaddbenchmark("Table insert / standard (solid)", "ob:test()", makeob1())local ob2mt = {data = {}}ob2mt.__index = ob2mtfunction ob2mt:test() 	table.insert(self.data, 'foo')  	self.data[1] = nilendfunction makeob2()  return setmetatable({}, ob2mt)endaddbenchmark("Table insert / Standard (metatable)", "ob:test()", makeob2())function makeob3()   local self = {data = {}};  function self.test()  	table.insert(self.data, 'foo')  	self.data[1] = nil  end  return selfendaddbenchmark("Table insert / Object using closures (PiL 16.4)", "ob.test()", makeob3())addbenchmark("Direct Access", "table.insert(ob.data, 'foo')", makeob1())addbenchmark("Local Variable", "table.insert(loc, 'foo')", 0)runbenchmarks(select(1,...) or runs)